# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Symfony

on:
    push:
        branches: [ "main" ]
    pull_request:
    schedule:
        - cron: '42 3 * * 0'
permissions:
    contents: read

jobs:
    phpunit:
        name: PHPUnit (PHP ${{ matrix.php }})
        runs-on: ubuntu-latest
        timeout-minutes: 20
        strategy:
            matrix:
                php:
                    # - '8.1'  # should still work with symfony 6 but api-platform/core requires 8.2
                    - '8.2'
                    - '8.3'
                    - '8.4'
        steps:
            # see https://github.com/shivammathur/setup-php#bookmark-versioning):
            - uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php }}
                  tools: pecl, composer
                  extensions: intl, bcmath, curl, openssl, mbstring, pdo_sqlite
              #    coverage: pcov
            - uses: actions/checkout@v3
            - name: Copy .env.test.local
              run: php -r "file_exists('.env.test.local') || copy('.env.test', '.env.test.local');"
            - name: Cache Composer packages
              id: composer-cache
              uses: actions/cache@v3
              with:
                  path: vendor
                  key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-php-
#            - name: Enable code coverage
#              if: matrix.coverage
#              run: echo "COVERAGE=1" >> $GITHUB_ENV
#            - name: Install Dependencies
#              run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
            - name: Update project dependencies
              run: composer update --no-interaction --no-progress --ansi

            - name: Create Database
              run: |
                  mkdir -p data
                  touch data/database.sqlite
            - name: Execute tests (Unit and Feature tests) via PHPUnit
              env:
                  DATABASE_URL: sqlite:///%kernel.project_dir%/data/database.sqlite
              run: bin/phpunit
              #--coverage-html=var/log/phpunit/html
            - name: Upload test artifacts
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: phpunit-logs-php${{ matrix.php }}
                  path: var/log/phpunit